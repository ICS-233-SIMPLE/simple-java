# This is a basic workflow to help you get started with Actions

name: Java Package and Publish JAR

# Controls when the workflow will run
on:
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:        
  package:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2.3.0
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Build sources
        working-directory: ./SIMPLE
        run: |
              mkdir build
              javac -cp "src:lib/*" src/edu/manipal/icas/simple/Main.java -d build
          
      - name: Copy manifest to /build
        working-directory: ./SIMPLE
        run: cp manifest.mf build/manifest.mf

      - name: Copy libs to /build
        working-directory: ./SIMPLE
        run: |
              mkdir build/lib
              cp lib/*.jar build/lib
              cd build
              for f in lib/*.jar; do jar xf "$f"; done
              rm -r lib

      - name: Copy resources to /build
        working-directory: ./SIMPLE
        run: |
              mkdir build/res
              cp -a res/. build/res
        
      - name: Package built .class files into JAR
        working-directory: ./SIMPLE/build
        run: jar cmf manifest.mf simple.jar *
        
      - name: Publish to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: simple.jar
          path: ./SIMPLE/build/simple.jar

      - name: Create release name
        run: |
              echo "RELEASE_DATE=$(date -u +\"%Y-%m-%dT%H-%M-%SZ)\"" >> ${GITHUB_ENV}
     
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}" 
        with:
          tag_name: ${{ env.RELEASE_DATE }}
          release_name: ${{ env.RELEASE_DATE }}
          draft: false
          prerelease: false

      - name: Upload release asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./SIMPLE/build/simple.jar
          asset_name: simple.jar
          asset_content_type: application/java-archive
